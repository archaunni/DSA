class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
# Create a LinkedList class
class LinkedList:
    def __init__(self):
        self.head = None

    # Method to add a node at the beginning of the LL
    def insert_b(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
    def insert_e(self,data):
        new_node=Node(data)
        cur=self.head
        while cur.next != None:
            cur=cur.next
        cur.next=new_node
    # Indexing starts from 1
    def insert_i(self, data, index):
        if index==1:
            self.insert_b(data)
        else:
            new_node=Node(data)
            cur=self.head
            cur_i=1
            while cur_i != index-1 and cur is not None:
                cur_i +=1
                cur=cur.next
            if cur is not None:
                dummy=cur.next
                cur.next=new_node
                new_node.next=dummy
            else:
                print("index not found")
    def delete_f(self):
        if self.head:
            dummy=self.head.next
            self.head=dummy
        else:
            return
    def delete_e(self):
        if self.head is None:
            return
        elif self.head.next is None:
            self.head=None
        else:
            cur=self.head
            
            while cur.next and cur.next.next:
                
                cur=cur.next
            cur.next=None
    def delete_i(self, index):
        if index==1 and self.head.next is None:
            self.head=None
        elif index==1 and self.head.next is not None:
            delete_f()
        else:
            cur_i=1
            cur=self.head
            while cur_i != index and cur:
                prev=cur
                cur=cur.next
                cur_i +=1
            if cur_i ==index and cur:
                prev.next=cur.next
            else:
                print("index not found")
                return
    def delete_d(self, data_d):
        if self.head.data == data_d:
            self.delete_f()
        else:
            cur=self.head
            while cur and cur.data != data_d:
                prev=cur
                cur=cur.next
            if cur is None:
                return
            prev.next=cur.next
        
        
            
    def display(self):
        print("Display starts")
        cur=self.head
        while cur:
            print(cur.data)
            cur=cur.next
        print("*****************")
